"use strict";(self.webpackChunkopen_libra_core_docs=self.webpackChunkopen_libra_core_docs||[]).push([[7325],{6021:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"cli-tools/query/view","title":"View","description":"Access pre-defined view methods","source":"@site/docs/cli-tools/query/view.md","sourceDirName":"cli-tools/query","slug":"/cli-tools/query/view","permalink":"/cli-tools/query/view","draft":false,"unlisted":false,"editUrl":"https://github.com/0LNetworkCommunity/documentation/edit/main/docs/cli-tools/query/view.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_label":"View","sidebar_position":7,"description":"Access pre-defined view methods"},"sidebar":"tutorialSidebar","previous":{"title":"Resources","permalink":"/cli-tools/query/resources"},"next":{"title":"epoch","permalink":"/cli-tools/query/epoch"}}');var o=t(4848),s=t(8453);const r={sidebar_label:"View",sidebar_position:7,description:"Access pre-defined view methods"},a="View",c={},d=[{value:"Description",id:"description",level:2},{value:"Usage",id:"usage",level:2},{value:"Examples",id:"examples",level:2}];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"view",children:"View"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,o.jsxs)(n.p,{children:["Throughout the codebase, there are many public methods with the ",(0,o.jsx)(n.code,{children:"#[view]"})," attribute. These methods are meant to retrieve various states and network values that are not related to a specific account (or at least not nessecerily)."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"query view"})," command allows you to invoke those methods from the command line, including the passing of required params when needed."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"libra query view [OPTIONS] --function-id <FUNCTION_ID>\n\nOptions:\n  -f, --function-id <FUNCTION_ID>  Function identifier has the form <ADDRESS>::<MODULE_ID>::<FUNCTION_NAME>\n                                   \n                                   Example:\n                                   0x1::coin::balance\n                                   \n  -t, --type-args <TYPE_ARGS>      Type arguments separated by commas\n                                   \n                                   Example:\n                                   'u8, u16, u32, u64, u128, u256, bool, address, vector<u8>, signer'\n                                   \n  -a, --args <ARGS>                Function arguments separated by commas\n                                   \n                                   Example:\n                                   '0x1, true, 12, 24_u8, x\"123456\"'\n                                   \n  -h, --help                       Print help\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.admonition,{title:"View invocation format",type:"note",children:(0,o.jsxs)(n.p,{children:["Note that the examples are querying the canonical system resource at ",(0,o.jsx)(n.code,{children:"0x1"}),", however, other view methods can be queried in the same way, following the ",(0,o.jsx)(n.code,{children:"RESOURCE_ADDRESS::MODULE_NAME::FUNCTION_NAME"})," pattern"]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'# Get the total suppply of the GAS coin\n# This will call the method with the following signature\n#\n# #[view]\n# public fun supply<CoinType>(): Option<u128> acquires CoinInfo {...}\n\nlibra query view --function-id 0x1::gas_coin::supply\n\n{\n  "body": [\n    "99999999355972010"\n  ]\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'# Get validators votes for network upgrade proposal #2. First `Yes` vote count, then `No` vote count\n\n# This will call the method with the following signature (note the expected `proposal_id` argument that is passed with the --args flag)\n# #[view]\n# public fun get_votes(proposal_id: u64) {...}\n\nlibra query view --function-id 0x1::diem_governance::get_votes --args 2\n\n{\n  "body": [\n    "10",\n    "0"\n  ]\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'# Get the list of validators that vouched for an account\n\n# This will call the method with the following signature (note the expected `proposal_id` argument that is passed with the --args flag)\n# #[view]\n# public fun all_vouchers(val: address): vector<address> acquires MyVouches {...}\n\nlibra query view --function-id 0x1::vouch::all_vouchers --args 0xd1281de242839fc939745996882c5fc2\n\n{\n  "body": [\n    [\n      "0xebbd5fb7042a7021dd71e3f6bddd55f3",\n      "0xd3ad1f9682d57d562efd23924aa8aaaf4c0410df5b1a9ff3e4b1efa04273f5b9",\n      "0x32f24e0488a4e189d38fccd1f2a94b53",\n      "0x3d3763dd90531da4fa264b4b76c9c5a76435c9b3eed2699b1f79bda28d23c42e",\n      "0x304a03c0b4acdfdce54bfaf39d4e0448",\n      "0xd67f3ff22bd719eb5be2df6577c9b42d",\n      "0xc208c09ecb52d626ef037c2011ba2d7b18f999eee5be54ac8161627613500c93"\n    ]\n  ]\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);