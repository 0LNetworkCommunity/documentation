"use strict";(self.webpackChunkopen_libra_core_docs=self.webpackChunkopen_libra_core_docs||[]).push([[8606],{4505:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"references/tools/testnet/validator-registration","title":"Add Validators To Testnet","description":"This assumes you have the libra cli installed in your local $PATH.","source":"@site/docs/references/tools/testnet/validator-registration.md","sourceDirName":"references/tools/testnet","slug":"/references/tools/testnet/validator-registration","permalink":"/references/tools/testnet/validator-registration","draft":false,"unlisted":false,"editUrl":"https://github.com/0LNetworkCommunity/documentation/edit/main/docs/references/tools/testnet/validator-registration.md","tags":[],"version":"current","lastUpdatedAt":1748451224000,"frontMatter":{},"sidebar":"docs","previous":{"title":"Using the Testnet","permalink":"/references/tools/testnet/"},"next":{"title":"A Good List","permalink":"/concepts/community-programs/a-good-list"}}');var a=n(4848),s=n(8453);const i={},r="Add Validators To Testnet",l={},c=[{value:"Quick start",id:"quick-start",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"add-validators-to-testnet",children:"Add Validators To Testnet"})}),"\n",(0,a.jsxs)(t.p,{children:["This assumes you have the ",(0,a.jsx)(t.code,{children:"libra"})," cli installed in your local ",(0,a.jsx)(t.code,{children:"$PATH"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"quick-start",children:"Quick start"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"# create account keys\nlibra wallet keygen\n\n# create the validator config files on your node\nlibra config validator-init\n\n# a friend will onboard the account if it doesn't yet exist on chain\n\n# send validator info\nlibra txs validator register\n\n# get vouches from existing validators (just ask)\nlibra txs validator vouch --vouch-for <YOUR ADDRESS>\n\n# submit a bid to be in the validator set\nlibra txs validator pof --bid-pct <PERCENT YOU PAY> --expiry <WHEN EXPIRES>\n\n"})}),"\n",(0,a.jsx)(t.h1,{id:"get-keys",children:"Get Keys"}),"\n",(0,a.jsx)(t.p,{children:"If you don't already have an account, you'll need a mnemonic (seed), to generate all keys."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"libra wallet keygen\n"})}),"\n",(0,a.jsx)(t.h1,{id:"initialize-validator-files",children:"Initialize validator files"}),"\n",(0,a.jsx)(t.p,{children:"Follow the prompts here. Your node needs to have keys generated using a mnemonic from step #1."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"libra config validator-init\n"})}),"\n",(0,a.jsx)(t.h1,{id:"get-the-account-on-chain",children:"Get the account on chain"}),"\n",(0,a.jsx)(t.p,{children:"Someone needs to create that account onchain first.\nAsk someone to deposit a coin to your accout from step #1"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"# friend sends one coin to your account which creates it\nlibra txs transfer -t <YOUR ACCOUNT> -a 1\n"})}),"\n",(0,a.jsx)(t.h1,{id:"submit-configs-to-chain",children:"Submit configs to chain"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"libra txs validator register\n\n# optionally pass -f to the file where operator.yaml from step #2 above is located\nlibra txs validator register -f /path/to/foo/operator.yaml\n\n"})}),"\n",(0,a.jsx)(t.h1,{id:"get-vouches",children:"Get Vouches"}),"\n",(0,a.jsx)(t.p,{children:"0L uses very light reputation games to keep the validator set trusted.\nJust ask an existing validator for a vouch. It doesn't cost you anything and it needs no stake."}),"\n",(0,a.jsx)(t.p,{children:"Your friend will:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"libra txs validator vouch --vouch-for <YOUR ADDRESS>\n"})}),"\n",(0,a.jsx)(t.h1,{id:"bid-to-be-in-the-validator-set",children:"Bid to be in the validator set"}),"\n",(0,a.jsx)(t.p,{children:"0L uses Proof-of-Fee for sybil resistance, instead of Proof-of-Stake. You don't need any stake to join, but you just need to be able to bid on how much you are willing to pay to be in the validator set. The cheapest bid proposed by validators will be actually what all validators pay (uniform price auction)."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"libra txs validator pof --bid-pct <PERCENT YOU PAY> --expiry <WHEN EXPIRES>\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var o=n(6540);const a={},s=o.createContext(a);function i(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);