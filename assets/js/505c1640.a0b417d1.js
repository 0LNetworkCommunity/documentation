"use strict";(self.webpackChunkopen_libra_core_docs=self.webpackChunkopen_libra_core_docs||[]).push([[6853],{7674:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"guides/node-operators/validators/detailed-instructions","title":"Setting up a Validator","description":"Requirements","source":"@site/docs/guides/node-operators/validators/detailed-instructions.md","sourceDirName":"guides/node-operators/validators","slug":"/guides/node-operators/validators/detailed-instructions","permalink":"/guides/node-operators/validators/detailed-instructions","draft":false,"unlisted":false,"editUrl":"https://github.com/0LNetworkCommunity/documentation/edit/main/docs/guides/node-operators/validators/detailed-instructions.md","tags":[],"version":"current","lastUpdatedAt":1748982976000,"frontMatter":{},"sidebar":"docs","previous":{"title":"Quick Start","permalink":"/guides/node-operators/validators/validator-quickstart"},"next":{"title":"Governance Transactions","permalink":"/guides/node-operators/validators/governance-tx"}}');var t=i(4848),a=i(8453);const l={},r="Setting up a Validator",o={},d=[{value:"Requirements",id:"requirements",level:3},{value:"Firewall",id:"firewall",level:3},{value:"Validator",id:"validator",level:4},{value:"VFN",id:"vfn",level:4},{value:"Setting up a Validator",id:"setting-up-a-validator-1",level:2},{value:"Create Binaries",id:"create-binaries",level:3},{value:"Run as fullnode first to sync your validator to the latest block",id:"run-as-fullnode-first-to-sync-your-validator-to-the-latest-block",level:3},{value:"Fullnode initialization",id:"fullnode-initialization",level:4},{value:"Start your node as fullnode",id:"start-your-node-as-fullnode",level:4},{value:"Switch to validator mode",id:"switch-to-validator-mode",level:3},{value:"Validator initialization",id:"validator-initialization",level:4},{value:"Run your node in validator mode",id:"run-your-node-in-validator-mode",level:4},{value:"Setup as a service(optional)",id:"setup-as-a-serviceoptional",level:3},{value:"Systemd template",id:"systemd-template",level:4},{value:"<code>tmux</code> basics",id:"tmux-basics",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"setting-up-a-validator",children:"Setting up a Validator"})}),"\n",(0,t.jsx)(n.h3,{id:"requirements",children:"Requirements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'TWO unix hosts, one for Validator Node, and one for the Private Fullnode ("VFN").\nlibra code focuses on Ubuntu 22.04.'}),"\n",(0,t.jsxs)(n.li,{children:["Recommended specs:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Validator: 300GB SSD harddrive, 8 core CPU, 16G RAM"}),"\n",(0,t.jsx)(n.li,{children:"VFN: 100G storage, 8 core CPU, 16G RAM"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Separate static IP addresses for the machines, or the appropriate DNS mapping."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"firewall",children:"Firewall"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["During testnet and devnet operation, you will likely open port ",(0,t.jsx)(n.code,{children:"8080"})," on your Validator to allow outside access to the RPC endpoint, which is an API that runs as part of the libra service.\nVFNs and public fullnodes should by default serve port ",(0,t.jsx)(n.code,{children:"8080"})," RPC for operability."]})}),"\n",(0,t.jsx)(n.h4,{id:"validator",children:"Validator"}),"\n",(0,t.jsxs)(n.p,{children:["The following ports must be open: ",(0,t.jsx)(n.code,{children:"6180"}),", ",(0,t.jsx)(n.code,{children:"6181"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"6180"})," should be open on all interfaces ",(0,t.jsx)(n.code,{children:"0.0.0.0/0"}),", it's for consensus and uses noise encryption."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"6181"}),' is for the private validator fullnode network ("VFN"), the firewall should only allow the IP of the fullnode to access this port.']}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"vfn",children:"VFN"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"This node does not serve transactions and does not participate in consensus, it relays data out of the validator node, and transactions into the validator."})}),"\n",(0,t.jsxs)(n.p,{children:["The following ports must be open: ",(0,t.jsx)(n.code,{children:"6181"}),", ",(0,t.jsx)(n.code,{children:"6182"}),", ",(0,t.jsx)(n.code,{children:"8080"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"6181"}),' is for the private validator fullnode network ("VFN"), it should only allow traffic from the Validator node IP address above.']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"6182"})," is for the the PUBLIC fullnode network. This is how the public nodes that will be serving JSON-RPC on the network will receive data and submit transactions to the network."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"8080"})," is the RPC port and we suggest VFNs and public fullnodes to serve this port by default for operability."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"setting-up-a-validator-1",children:"Setting up a Validator"}),"\n",(0,t.jsx)(n.p,{children:"These instructions target Ubuntu."}),"\n",(0,t.jsxs)(n.p,{children:["1.1. Set up an Ubuntu host with ",(0,t.jsx)(n.code,{children:"ssh"})," access, e.g. in a cloud service provider."]}),"\n",(0,t.jsx)(n.p,{children:"1.2. Associate a static IP with your host, this will be tied to you account. This address will be shared on the chain, so that other nodes will be able to find you through the peer discovery mechanism."}),"\n",(0,t.jsxs)(n.p,{children:["1.3. Libra binaries should be run in a linux user that has very narrow permissions. Before you can create binaries you'll need some tools installed probably by ",(0,t.jsx)(n.code,{children:"sudo"})," and likely in root."]}),"\n",(0,t.jsxs)(n.p,{children:["1.4. Use ",(0,t.jsx)(n.code,{children:"tmux"})," to persist the terminal session for build, as well as for running the nodes and tower app. Also this setup requires ",(0,t.jsx)(n.code,{children:"git"})," and ",(0,t.jsx)(n.code,{children:"make"}),", which might be installed already on your host. If not, perform the following steps now:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo apt update\nsudo apt install -y git tmux jq build-essential cmake clang llvm pkg-config libssl-dev lld libpq-dev\n"})}),"\n",(0,t.jsx)(n.p,{children:"1.5. Install Rust"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y\n\n# restart your bash instance to pickup the cargo paths\nsource ~/.bashrc\n"})}),"\n",(0,t.jsx)(n.h3,{id:"create-binaries",children:"Create Binaries"}),"\n",(0,t.jsx)(n.p,{children:"It is recommended to perform the steps from 1.7 onwards inside tmux. Short tmux instruction:"}),"\n",(0,t.jsxs)(n.p,{children:["1.6 Start a new ",(0,t.jsx)(n.a,{href:"#tmux-basics",children:"tmux"})," session"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# start a new tmux session\ntmux new -t libra-setup\n"})}),"\n",(0,t.jsx)(n.p,{children:"1.7 Clone this repo:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/0LNetworkCommunity/libra-framework\ncd ~/libra-framework\n"})}),"\n",(0,t.jsxs)(n.p,{children:["1.8 Build the source and install binaries:\nThis takes a while, ensure your are still inside the ",(0,t.jsx)(n.code,{children:"tmux"})," session to avoid your session gets disconnected."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cargo build --release -p libra\n"})}),"\n",(0,t.jsxs)(n.p,{children:["1.9 Making the ",(0,t.jsx)(n.code,{children:"libra"})," binary globally executable and persistent"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["This assumes the ",(0,t.jsx)(n.code,{children:"libra"})," binary is already built and located at ",(0,t.jsx)(n.code,{children:"~/libra-framework/target/release/libra"}),"."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Copy libra binaries to cargo bins path\nsudo cp -f ~/libra-framework/target/release/libra* ~/.cargo/bin/\n\n# Check libra execution and version\nlibra version\n"})}),"\n",(0,t.jsx)(n.h3,{id:"run-as-fullnode-first-to-sync-your-validator-to-the-latest-block",children:"Run as fullnode first to sync your validator to the latest block"}),"\n",(0,t.jsx)(n.h4,{id:"fullnode-initialization",children:"Fullnode initialization"}),"\n",(0,t.jsxs)(n.p,{children:["Initialize ",(0,t.jsx)(n.code,{children:"~/.libra"})," config directory"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"libra config init\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Grab the ",(0,t.jsx)(n.strong,{children:"genesis blob"})," and ",(0,t.jsx)(n.strong,{children:"waypoint"})," (creates ",(0,t.jsx)(n.code,{children:"fullnode.yaml"}),")"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"libra config fullnode-init\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Make sure the peers listed in ",(0,t.jsx)(n.code,{children:"~/.libra/fullnode.yaml"})," are active to avoid connection issues."]})}),"\n",(0,t.jsxs)(n.p,{children:["Set your client ",(0,t.jsx)(n.code,{children:"libra.yaml"})," with the rpc-load-balancer upstream node"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"libra config fix --fullnode-url https://rpc.openlibra.space:8080/v1\n"})}),"\n",(0,t.jsx)(n.h4,{id:"start-your-node-as-fullnode",children:"Start your node as fullnode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"libra node --config-path ~/.libra/fullnode.yaml\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Check sync status using ",(0,t.jsx)(n.code,{children:"watch 'curl localhost:8080/v1/ | jq'"}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"switch-to-validator-mode",children:"Switch to validator mode"}),"\n",(0,t.jsx)(n.h4,{id:"validator-initialization",children:"Validator initialization"}),"\n",(0,t.jsx)(n.p,{children:"Set up validator using the validator config tool"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"libra config validator-init\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Make sure the peers listed in ",(0,t.jsx)(n.code,{children:"~/.libra/validator.yaml"})," are active to avoid connection issues."]})}),"\n",(0,t.jsxs)(n.p,{children:["Following this you can see and edit your validator config file ",(0,t.jsx)(n.code,{children:"~/.libra/operator.yaml"}),".\nOn both machines, the config in ",(0,t.jsx)(n.code,{children:"operator.yaml"})," should be complete with separate Validator and VFN keys and IPs"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'validator_network_public_key: "0x_thiswasalreadyset_public_key"\nvalidator_host:\n  host: <validator_ip>\n  port: 6180\nfull_node_network_public_key: "0x_full_node_network_public_key"\nfull_node_host:\n  host: <vfn_ip>\n  port: 6182\n'})}),"\n",(0,t.jsx)(n.h4,{id:"run-your-node-in-validator-mode",children:"Run your node in validator mode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"libra node --config-path ~/.libra/validator.yaml\n"})}),"\n",(0,t.jsx)(n.h3,{id:"setup-as-a-serviceoptional",children:"Setup as a service(optional)"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Install Service"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"Use this service template instead of running in tmux"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo nano /lib/systemd/system/libra-node.service\n"})}),"\n",(0,t.jsx)(n.h4,{id:"systemd-template",children:"Systemd template"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'[Unit]\nDescription=Libra Node Service\n\n[Service]\nUser=nodeuser\nGroup=nodeuser\n\nLimitNPROC=1048576\nLimitNOFILE=1048576\n\n#Environment="RUST_LOG=warn"\nWorkingDirectory=/home/nodeuser/.libra\nExecStart=/home/nodeuser/libra-framework/target/release/libra node --config-path /home/nodeuser/.libra/validator.yaml\n\nRestart=on-failure\nRestartSec=3s\n\nStandardOutput=journal\nStandardError=journal\nSyslogIdentifier=libra-node\n\n[Install]\nWantedBy=multi-user.target\nAlias=libra-node.service\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# config the service and start\nsudo systemctl enable libra-node\nsudo systemctl start libra-node\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Reload and start system service"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo systemctl daemon-reload\n\nsudo systemctl enable libra-node\n\nsudo systemctl start libra-node\n\n# Check the service is operating correctly\nsudo systemctl status libra-node\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"tmux-basics",children:[(0,t.jsx)(n.code,{children:"tmux"})," basics"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["New session: ",(0,t.jsx)(n.code,{children:"tmux new -t <SESSION_NAME>"})]}),"\n",(0,t.jsx)(n.li,{children:"Detach from Session: press Ctrl-b and then d"}),"\n",(0,t.jsxs)(n.li,{children:["rejoin unnamed session, if only one session exists: ",(0,t.jsx)(n.code,{children:"tmux a"})]}),"\n",(0,t.jsxs)(n.li,{children:["rejoin unnamed session by id: ",(0,t.jsx)(n.code,{children:"tmux ls"})," to get the ID and then ",(0,t.jsx)(n.code,{children:"tmux a -t <SESSION_ID>"})]}),"\n",(0,t.jsxs)(n.li,{children:["rejoin named session: ",(0,t.jsx)(n.code,{children:"tmux a -t <SESSION_NAME>"})]}),"\n",(0,t.jsxs)(n.li,{children:["kill session: attach to the session --\x3e press Ctrl-b, then type ",(0,t.jsx)(n.code,{children:":kill-session"})," and press ENTER"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>r});var s=i(6540);const t={},a=s.createContext(t);function l(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);