"use strict";(self.webpackChunkopen_libra_core_docs=self.webpackChunkopen_libra_core_docs||[]).push([[6614],{8258:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"guides/developers/dev-quick-start","title":"Quick Start","description":"Install","source":"@site/docs/guides/developers/dev-quick-start.md","sourceDirName":"guides/developers","slug":"/guides/developers/dev-quick-start","permalink":"/guides/developers/dev-quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/0LNetworkCommunity/documentation/edit/main/docs/guides/developers/dev-quick-start.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"VFN YAML file example","permalink":"/guides/node-operators/validators/yaml-templates/vfn-yaml"},"next":{"title":"Move Formal Verification","permalink":"/guides/developers/formal-verification"}}');var s=t(4848),i=t(8453);const o={},l="Quick Start",a={},d=[{value:"Install",id:"install",level:2},{value:"You must install <code>libra</code> cli tool to your PATH.",id:"you-must-install-libra-cli-tool-to-your-path",level:3},{value:"Export some environment variables",id:"export-some-environment-variables",level:3},{value:"Build the framework release",id:"build-the-framework-release",level:2},{value:"Run tests",id:"run-tests",level:2},{value:"Framework unit tests",id:"framework-unit-tests",level:4},{value:"Formal verification tests",id:"formal-verification-tests",level:3},{value:"Smoke tests",id:"smoke-tests",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function c(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"quick-start",children:"Quick Start"})}),"\n",(0,s.jsx)(r.h2,{id:"install",children:"Install"}),"\n",(0,s.jsxs)(r.h3,{id:"you-must-install-libra-cli-tool-to-your-path",children:["You must install ",(0,s.jsx)(r.code,{children:"libra"})," cli tool to your PATH."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"# in this repo\ncargo build --release -p libra\n\n# copy to a dir in your PATH,\n# e.g. the $HOME/cargo/bin directory assuming it's added to your $PATH.\n\ncp ./target/release/libra ~/.cargo/bin\nchmod +x ~/.cargo/bin/libra\n\n# check location\nwhich libra\n\n# check version\nlibra version\n"})}),"\n",(0,s.jsx)(r.h3,{id:"export-some-environment-variables",children:"Export some environment variables"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:'# Add to your $HOME/.bashrc, or $HOME/.zshrc\n\n##### Must export to see debug prints from Move VM\n\nexport DIEM_MOVE_DEBUG=true\n\n##### NECESSARY ONLY FOR SMOKE TESTS\n\n# must have correct path to `libra` bin for the local testnet to run\nexport DIEM_FORGE_NODE_BIN_PATH="$HOME/.cargo/bin/libra"\n\n# for heavy smoke tests like `upgrades` and `restore`\nexport RUST_MIN_STACK=104857600\n'})}),"\n",(0,s.jsx)(r.h2,{id:"build-the-framework-release",children:"Build the framework release"}),"\n",(0,s.jsxs)(r.p,{children:['The output is a "move release bundle" at ',(0,s.jsx)(r.code,{children:"./framework/releases/head.mrb"}),", which\nThis is the file necessary for network genesis for mainnet and testnet.\nNOTE: because it is the genesis file, the smoke tests (which simulate running networks) requires this file."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"cd ./framework\nlibra move framework release\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Your release will be in ",(0,s.jsx)(r.code,{children:"./releases/head.mrb"}),", you will need this for genesis and smoketests."]}),"\n",(0,s.jsx)(r.h2,{id:"run-tests",children:"Run tests"}),"\n",(0,s.jsx)(r.h4,{id:"framework-unit-tests",children:"Framework unit tests"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"# run framework tests with:\n# remember export DIEM_MOVE_DEBUG=true envvar for debug prints from Move VM\ncd ./framework/libra-framework\nlibra move test\n\n# optionally with filters:\n\n`libra move test -f <test name>`\n"})}),"\n",(0,s.jsx)(r.h3,{id:"formal-verification-tests",children:"Formal verification tests"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"# run formal verification with\nlibra move prove\n"})}),"\n",(0,s.jsx)(r.h2,{id:"smoke-tests",children:"Smoke tests"}),"\n",(0,s.jsx)(r.p,{children:"Note for smoke tests: you must regenerate the .mrb file EVERYTIME YOU MAKE A CHANGE TO CORE MOVE CODE. Otherwise your tests will be against the old code. See above how to build a release"}),"\n",(0,s.jsx)(r.p,{children:"See instructions on environment variables above. Remember to export DIEM_FORGE_NODE_BIN_PATH, otherwise nothing will happen. For some tests (upgrade, rescue) the RUST_MIN_STACK needs to be set higher than the default for rust. That's because some tests have higher memory requirements when having multiple recompiliations for the move source."}),"\n",(0,s.jsxs)(r.p,{children:["Note that the Move VM ",(0,s.jsx)(r.code,{children:"[debug]"})," prints do not appear in the terminal, they will appear in the log files of the individual simulated nodes."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"# run smoke tests (using cargo)\ncd ./smoke-tests\ncargo test\n"})}),"\n",(0,s.jsx)(r.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsxs)(r.p,{children:["**Issue building ",(0,s.jsx)(r.code,{children:"libra"})," binary **"]}),"\n",(0,s.jsxs)(r.p,{children:["If you encounter the following error:\n",(0,s.jsx)(r.code,{children:"error[E0599]: no method named disable_lifo_slot found for mutable reference &mut tokio::runtime::Builder in the current scope"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Solution"})}),"\n",(0,s.jsx)(r.p,{children:"You can resolve this issue by building with the following flag:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:'RUSTFLAGS="--cfg tokio_unstable" cargo build --profile cli -p diem-node --target-dir ~/.cargo/bin\n'})}),"\n",(0,s.jsx)(r.p,{children:"This flag enables the unstable features required by the tokio runtime."})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>l});var n=t(6540);const s={},i=n.createContext(s);function o(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);