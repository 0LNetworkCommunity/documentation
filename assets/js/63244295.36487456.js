"use strict";(self.webpackChunkopen_libra_core_docs=self.webpackChunkopen_libra_core_docs||[]).push([[1052],{2960:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"tools/integrators/integrators","title":"Integrators","description":"Integrating systems with Open Libra","source":"@site/docs/tools/integrators/integrators.md","sourceDirName":"tools/integrators","slug":"/tools/integrators/","permalink":"/tools/integrators/","draft":false,"unlisted":false,"editUrl":"https://github.com/0LNetworkCommunity/documentation/edit/main/docs/tools/integrators/integrators.md","tags":[],"version":"current","frontMatter":{"title":"Integrators","hidden":false,"description":"Integrating systems with Open Libra"},"sidebar":"tutorialSidebar","previous":{"title":"Add Validators To Testnet","permalink":"/tools/testnet/validator-registration"},"next":{"title":"Move Smart Contracts","permalink":"/tools/move/"}}');var s=t(4848),o=t(8453);const r={title:"Integrators",hidden:!1,description:"Integrating systems with Open Libra"},a="Integrating systems with Open Libra",l={},c=[{value:"Optionally use NodeJS sdk",id:"optionally-use-nodejs-sdk",level:2},{value:"Test accounts",id:"test-accounts",level:3},{value:"Alice",id:"alice",level:4},{value:"Open Libra Testnet",id:"open-libra-testnet",level:2},{value:"Start a local testnet",id:"start-a-local-testnet",level:2},{value:"Connect to local testnet with client",id:"connect-to-local-testnet-with-client",level:3},{value:"using <code>libra</code> cli",id:"using-libra-cli",level:3},{value:"Using typescript sdk",id:"using-typescript-sdk",level:3},{value:"Optionally Build Source",id:"optionally-build-source",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"integrating-systems-with-open-libra",children:"Integrating systems with Open Libra"})}),"\n",(0,s.jsxs)(n.p,{children:["Open Libra provides containers with signed pre-built ",(0,s.jsx)(n.code,{children:"libra"})," binary which starts nodes and sends transactions."]}),"\n",(0,s.jsx)(n.p,{children:"The default instructions assumes you are using container tools like docker, kubernetes, podman etc."}),"\n",(0,s.jsx)(n.p,{children:"Below we include instructions for building from source."}),"\n",(0,s.jsx)(n.h1,{id:"run-a-container-fullnode",children:"Run a container fullnode"}),"\n",(0,s.jsxs)(n.p,{children:["Instructions for running a fullnode with docker etc. can be found at: ",(0,s.jsx)(n.a,{href:"https://github.com/0LNetworkCommunity/libra-framework/blob/main/container/README.md",children:"https://github.com/0LNetworkCommunity/libra-framework/blob/main/container/README.md"})]}),"\n",(0,s.jsxs)(n.h1,{id:"execute-transactions-with-libra-binary",children:["Execute transactions with ",(0,s.jsx)(n.code,{children:"libra"})," binary"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"libra"})," cli binary for running the node, also includes subcommands for executing transactions.\n",(0,s.jsx)(n.a,{href:"/tools/cli-tools/txs/transfer",children:"More info:"})]}),"\n",(0,s.jsx)(n.h2,{id:"optionally-use-nodejs-sdk",children:"Optionally use NodeJS sdk"}),"\n",(0,s.jsxs)(n.p,{children:["The NodeJS typescript SDK is available for integrators. This library is NOT included in the container environment.\nNPM package: ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/open-libra-sdk",children:"https://www.npmjs.com/package/open-libra-sdk"})]}),"\n",(0,s.jsx)(n.h1,{id:"testing-your-integration",children:"Testing your integration"}),"\n",(0,s.jsx)(n.p,{children:"Testnets on Open Libra are configured exactly as in production. As such there are no special features (such as faucets).\nTo simulate transactions (e.g. create other accounts), you can load a wallet with predefined test mnemonics. These personas, alice, bob, carol, are the genesis validators of the testnets."}),"\n",(0,s.jsx)(n.h3,{id:"test-accounts",children:"Test accounts"}),"\n",(0,s.jsx)(n.h4,{id:"alice",children:"Alice"}),"\n",(0,s.jsxs)(n.p,{children:["address: ",(0,s.jsx)(n.code,{children:"0x87515d94a244235a1433d7117bc0cb154c613c2f4b1e67ca8d98a542ee3f59f5"})]}),"\n",(0,s.jsxs)(n.p,{children:["mnemonic: ",(0,s.jsx)(n.code,{children:"talent sunset lizard pill fame nuclear spy noodle basket okay critic grow sleep legend hurry pitch blanket clerk impose rough degree sock insane purse"})]}),"\n",(0,s.jsx)(n.h2,{id:"open-libra-testnet",children:"Open Libra Testnet"}),"\n",(0,s.jsxs)(n.p,{children:["A testnet API service can be accessed at: ",(0,s.jsx)(n.code,{children:"http://testnet.openlibra.io:8080/v1"}),". Note the state resets every week. There is no faucet on OL testnets (we use production settings). You should use the default genesis test accounts (Alice, Bob, Carol) as described here."]}),"\n",(0,s.jsxs)(n.p,{children:["Note that the chain id for the chain_name ",(0,s.jsx)(n.code,{children:"TESTNET"})," is ",(0,s.jsx)(n.code,{children:"2"}),". If you submit mainnet (id ",(0,s.jsx)(n.code,{children:"1"}),") against this URL, transactions will be rejected."]}),"\n",(0,s.jsx)(n.h2,{id:"start-a-local-testnet",children:"Start a local testnet"}),"\n",(0,s.jsxs)(n.p,{children:["Using ",(0,s.jsx)(n.code,{children:"docker compose"})," or equivalent you can start a containerized testnet of three nodes."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Checkout the files at:\nhttps://github.com/0LNetworkCommunity/libra-framework/tree/main/container\n\n# Start the testnet\ndocker up compose.yaml -d\n\n# wait about one minute, then the API from node-1 (alice) will respond\ncurl localhost:8280/v1\n"})}),"\n",(0,s.jsx)(n.h3,{id:"connect-to-local-testnet-with-client",children:"Connect to local testnet with client"}),"\n",(0,s.jsxs)(n.h3,{id:"using-libra-cli",children:["using ",(0,s.jsx)(n.code,{children:"libra"})," cli"]}),"\n",(0,s.jsx)(n.p,{children:"Update the $HOME/.libra/cli config"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"# Interactive tool: configure tools, enter the mnemonic above\nlibra config init\nlibra config --profile my-testnet fix --force-url localhost:8280/v1\n"})}),"\n",(0,s.jsx)(n.p,{children:"Optionally for automated testing these envvars for non-interactive mode:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"export LIBRA_CI=1\n# obviously don't do this in production\nexport MNEM=<your mnemonic>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-typescript-sdk",children:"Using typescript sdk"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"  import { Libra } from 'open-libra-sdk'\n  // get the mainnet fullnode\n  const libra = new Libra();\n\n  // optionally connect to a local testnet\n  const libra = new Libra(Network.TESTNET, 'localhost:8480/v1');\n\n  const ledgerInfo = await libra.getLedgerInfo();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"optionally-build-source",children:"Optionally Build Source"}),"\n",(0,s.jsxs)(n.p,{children:["Instead of using the published container image you may choose to build from source. This assumes you have Rust installed on the ",(0,s.jsx)(n.code,{children:"stable"})," channel."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"git clone https://github.com/0LNetworkCommunity/libra-framework\ncd libra-framework\n\nrust build --release -p libra\n\n# Copy the binary to where you need it\ncp ./target/release/libra $HOME/.cargo/bin\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);